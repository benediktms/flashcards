// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                   String                @id @default(cuid())
  name                 String
  email                String                @unique
  emailVerified        DateTime?
  passwordHash         String
  image                String?
  accounts             Account[]
  sessions             Session[]
  flashcardCollections FlashcardCollection[]
  Flashcard            Flashcard[]
  Membership           Membership[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Membership {
  id     String @id @default(cuid())
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  tags   Tag[]
}

model FlashcardCollection {
  id         String      @id @default(cuid())
  name       String      @default("Default Collection")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @default(now())
  User       User?       @relation(fields: [userId], references: [id])
  userId     String?
  flashcards Flashcard[]

  @@unique([name, userId])
}

model Flashcard {
  id                    String              @id @default(cuid())
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @default(now())
  term                  String
  termTranslation       String
  example               String?
  exampleTranslation    String?
  User                  User                @relation(fields: [userId], references: [id])
  userId                String
  TagsOnFlashcards      TagsOnFlashcards[]
  FlashcardCollection   FlashcardCollection @relation(fields: [flashcardCollectionId], references: [id])
  flashcardCollectionId String
}

model Tag {
  id               String             @id @default(cuid())
  name             String
  Membership       Membership         @relation(fields: [membershipId], references: [id], onDelete: Cascade)
  membershipId     String
  TagsOnFlashcards TagsOnFlashcards[]
}

model TagsOnFlashcards {
  id          String    @id @default(cuid())
  Flashcard   Flashcard @relation(fields: [flashcardId], references: [id], onDelete: Cascade)
  flashcardId String
  Tag         Tag       @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId       String

  @@unique([flashcardId, tagId])
}
